-- Carcassonne and all expansions w/ automated scripting
-- Scripting by Sancho
-- The rules are based on the contents of Carcassonne Annotated Rules (CAR) v7.4.

--Tile Script Info
-- Each tile should have a script including variables needed to represent the information on the tile. The data format is as follows:
-- *In all examples, the "starting piece" is used*
-- *It should be noted that the "top" and "topleft" is from the perspective of the white player. All of the tiles are, in actuality, rotated by 180 degrees, which is taken into account in code with TILE_STANDARD_ROTATION
-- Data Format:
--  sides - table of strings ( ie. {'City', 'Road', 'Field', 'Road'} ) Specifies the feature on each side of the tile, starting from the "top" clockwise (top is arbitrary, but must be consistent amoung pieces)
--             features: 'City', 'Road', 'Field', 'River', 'Abbey'
--  (optional) linkedQuadrants - table of tables of ints ( ie. {{2, 4}} ) Each table specifies which features are linked together, starting from the "top" at 1 and increasing clockwise.
--             This only applies for features that take the middle of the side (ie. roads, rivers)
--             In the example, the right side is linked to the left side (the road)
--  (optional) linkedOctants - table of tables of ints ( ie. {{5, 6}, {7, 12}, {8, 9, 10, 11}} ) Each table specifies which half of each quadrant is linked to others, starting from the "topleft" at 5 and increasing clockwise.
--             This is necessary for fields and cities, in particular, since both halves of a quadrant aren't always linked to each other.
--             Also, this specifies how the fields on each half of a road feature are linked to other fields. Therefore, each road quadrant may also have 2 corresponding octants specified for that same side.
--             In the example, the topleft and topright octants are linked
--                             the righttop and lefttop octants are linked (This is the field on the top half of the road)
--                             the rightbottom, bottomright, bottomleft, and leftbottom octants are linked (this is the field on the bottom half of the road)
--  (optional) specialFeatures - table of tables containing a string (which specifies the feature), (optional) table of ints, and (optional) table of exactly 2 floats ( ie. {{'City-Field', {5, 6, 7, 12}, nil}} )
--             The table of ints specifies what quadrants or octants this feature is linked to (if any).
--             The table of floats specifies the relative x and z coordinates of the feature on this piece (if a figure can be placed on the feature).
--             features:
--                  Base features ('City', 'Road', 'Field', 'Abbey') - this allows for additional locations for specifying the base features.
--                       this is useful for defining additional snap points, as well as allowing features which aren't connected to any quadrant or octant (there are a few fields like this).
--                  'Cloister' = cloister - specifies the location of a cloister. Links are not used for this feature.
--                  'City-Field' = city-field link - if the cities specified are completed, they score points to the specified fields. Multiple different cities and fields specified
--                             are NOT linked to each other, only fields are linked to cities (and vice versa, in the case of using old rules (TODO: implement later?). Coordinates are not used for this feature.
--                  'Road Intersection' = links roads to each other or other features. This is used for wagons.
--                  Linked Features with no coordinates: 'Pennant', 'Inn', 'Cathedral', 'Princess'
--                  Unlinked Features of the tile: 'Volcano', 'Dragon', 'Hill'
--                  'Garden' - specifies the location of a garden. Links are not used for this feature.
--  (optional) symmetry - # of ways this tile can be rotated and yield a unique result. Default is 4.
--             For example, symmetry = 1 would imply that the tile has the same data no matter which way it is rotated. symmetry = 2 implies that the tile is bilaterally symmetric.
--             This value is purely used as a short-cut to trim the number of different rotations that need to be calculated with AI.


-- Constants - These values never change and are only used to improve readability of the code

AUTOLOCK = true

TILE_PLACEMENT_MARGIN = 0.30 --Tiles must be placed within 30% of a tile width to the grid line and within 30% rotation of being face-up and matching the grid line to be valid
TILE_SPACING = 1.59 --how far apart tiles are spaced (should be the same as the tile grid setting)
TILE_THICKNESS = 0.005 --about how much thicker each tile makes a stack when added (keep in mind this is probably not as thick as the tile actually is on its own)
TILE_STANDARD_ROTATION = 2 --every tile is rotated this much so that the perceived rotation of the tiles matches the actual rotation in the code
TILE_180_ROTATION = 2

SPAM_DELAY = 2 --amount of time after an error message before another will be printed
TILE_PLACEMENT_DELAY = 1 --amount of time after a tile is dropped before it is validated
FIGURE_PLACEMENT_DELAY = 2 --amount of time after a figure is dropped before it is validated

MAX_X = 33
MIN_X = 1
MAX_Z = 33
MIN_Z = 1
--HACK: TTS cannot save table variables with negative indexes. Adding this arbitrary value to offset the middle ensures that all grid positions are positive (unless another table is used)
--Note to self: if you change these values, you'll need to prevent tileGrid from loading and getting overwritten
MIDDLE_X_OFFSET = 17
MIDDLE_Z_OFFSET = 17
MIDDLE_OFFSET = {x = MIDDLE_X_OFFSET * TILE_SPACING, z = MIDDLE_Z_OFFSET * TILE_SPACING}
TABLE_SURFACE_Y = 1.03171348571777

SIDE_DELTA = {{x=0,z=-1},{x=-1,z=0},{x=0,z=1},{x=1,z=0}} --relative 4 positions adjacent to the current tile
DIAGONAL_DELTA = {{x=-1,z=1},{x=0,z=1},{x=1,z=1},{x=1,z=0},{x=1,z=-1},{x=0,z=-1},{x=-1,z=-1},{x=-1,z=0}} --relative 8 positions adjacent and diagonal to the current tile

NEUTRAL_ITEMS_LOCATION = {x = 15.5, y = 1.5, z = 28.0}

--The following figure definitions were specified in the CAR (Carcassonne Annoted Rules).
--Although not all figures have the same properties, their relative similarities may simpify code
MEEPLE_TYPES = {'Follower', 'Big Follower', 'Phantom'} --'normal' follower types that can be placed almost anywhere
FOLLOWER_TYPES = {'Follower', 'Big Follower', 'Phantom', 'Abbot', 'Mayor', 'Wagon'}
SPECIAL_FIGURE_TYPES = {'Shepherd', 'Builder', 'Pig', 'Barn'}
NEUTRAL_FIGURE_TYPES = {'Count', 'Dragon', 'Fairy', 'Tower'}
TILE_FEATURES = {'Abbey', 'Volcano', 'Dragon', 'Magic Portal', 'Bazaar', 'Hill', 'Vineyard', 'Wheel-1', 'Wheel-2', 'Wheel-3', 'Gold'} --features that are not associated with any position or any other feature. They exist as a feature of the tile itself
PROXIMITY_FEATURES = {'Cloister', 'Abbey', 'Shrine', 'Garden', "Baba Yaga's Hut"} --features that change based on the actions of surrounding tiles
CLOISTER_FEATURES = {'Cloister', 'Abbey', 'Shrine'} --features that are essentially cloisters in many aspects of the rules
NUM_TOWERS_PER_PLAYER = {[1] = 10, [2] = 10, [3] = 9, [4] = 7, [5] = 6, [6] = 5}
TOWER_HEIGHT = 0.28 --How tall each Tower piece is
GOLD_BAR_NAME = 'Gold Bar'
SHEEP_TOKEN_TYPES = {'Sheep', 'Wolf'}
TRADE_TOKEN_TYPES = {'Wine Token', 'Wheat Token', 'Cloth Token'}
TRADE_TOKEN_COUNTS = {
    ['Wine'] = 9,
    ['Wheat'] = 6,
    ['Cloth'] = 5
}
TRADE_GOOD_TYPES = {'Wine', 'Wheat', 'Cloth'}

PLAYER_COLORS = {'Green', 'Purple', 'White', 'Blue', 'Red', 'Pink'}

FLOATING_BUTTON_HEIGHT = 2.0
FLOATING_BUTTON_HEIGHT_LOW = 1.0

FIGURE_DISTANCE_FROM_EDGE = 0.1 --percentage distance from the edge that each quadrant/octant exists

FIGURE_RETURN_DELAY = 0.5 --seconds to wait while returning a figure in order to prevent double-scoring
FIGURE_PRAISE_DELAY = 2.5 --seconds to wait while figure is spinning before it is returned
FIGURE_CAPTURE_DELAY = 2.0 --seconds to wait after capturing a figure before it is locked

FRAME_TIME = 0.01667 --time that coroutine can run before it should yield to the main thread. Approx 60FPS

PLAY_AREA_SCRIPTING_ZONE_GUID = '799064'
EXPANSION_BAG_AREA_SCRIPTING_ZONE_GUID = 'a73507'
CONTROL_PANEL_GUID = '45460c'
BUTTON_ANCHOR_GUID = '07fd9a'
SOUNDBOARD_GUID = '9c8d01'
EXPANSION_TABLE_GUID = 'f01594'

CURRENT_PLAYER_MARKER = "âž¡ " -- symbol(s) that should be printed on the scoreboard before the current player

PLAYER_POSSESSION_ZONE_HEIGHT = 2.5
PLAYER_POSSESSION_ZONE_DEPTH = 3.9
PLAYER_POSSESSION_ZONE_WIDTH = 24.0
PLAYER_POSSESSION_POSITIONS =
{
    ['KnRBRobber'] = {x=8.4, z=0.5},
    ['KnRBKing'] = {x=10.4, z=0.5},
    ['Cloth'] = {x=5.9, z=1.0},
    ['Wine'] = {x=5.9, z=0.0},
    ['Wheat'] = {x=6.9, z=1.0},
    ['CapturedFollower'] = {x=10.9, z=-1.5},
    ['Gold'] = {x=10.9, z=-0.75}
}
PLAYER_POSSESSION_SPACING = 1.0 --spacing for multiple objects of the same type

-- Guid for object we will put button on
BUTTON_BOARD_GUID = '2b44bf'

--Defines the GUIDs of the various objects stored in bags. These IDs are necessary to pull these items out of the bags.
EXPANSION_BAGS = {
    --Major Expansions
    ['InC'] = {guid = '95eb56', contents = {
        ['InCTiles'] = {guid = '122dff'}
        -- ['InCBigFollower'] = {guid = 'e5ec48', contents =
        --     {['Green'] = {guid = 'd9ab61'}, ['Purple'] = {guid = '62c526'}, ['White'] = {guid = '85ef73'}, ['Blue'] = {guid = 'f741b3'}, ['Red'] = {guid = 'ac3616'}, ['Yellow'] = {guid = '2456df'}}
        -- }
    }},
    ['TnB'] = {guid = '09fab1', contents = {
        ['TnBTiles'] = {guid = 'a88997'},
        -- ['TnBBuilder'] = {guid = 'a3aea6', contents =
        --     {['Green'] = {guid = '61cb95'}, ['Purple'] = {guid = '4ea21e'}, ['White'] = {guid = 'e11ef8'}, ['Blue'] = {guid = '128a06'}, ['Red'] = {guid = 'b12bcc'}, ['Yellow'] = {guid = '967ed5'}}
        -- },
        -- ['TnBPig'] = {guid = 'a3aea6', contents =
        --     {['Green'] = {guid = 'a180e1'}, ['Purple'] = {guid = '3f96a3'}, ['White'] = {guid = '2eb691'}, ['Blue'] = {guid = '8f7df7'}, ['Red'] = {guid = 'cc6164'}, ['Yellow'] = {guid = '26c485'}}
        -- },
        ['TnBClothTokenStack'] = {guid = 'ebd019'},
        ['TnBWineTokenStack'] = {guid = '55a94f'},
        ['TnBWheatTokenStack'] = {guid = '7a829b'}
    }},
    ['PnD'] = {guid = '564958', contents = {
        ['PnDTiles'] = {guid = '89bb59'},
        ['PnDDragon'] = {guid = 'e191ec'},
        ['PnDFairy'] = {guid = '46278a'}
    }},
    ['Tower'] = {guid = 'd59a8b', contents = {
        ['TowerTiles'] = {guid = '15a27f'}
    }},
    ['AnM'] = {guid = '9295b3', contents = {
        ['AnMTiles'] = {guid = '44e318'},
        ['AnMAbbey'] = {guid = '7e2126'},
        ['AnMMayor'] = {guid = '3cee76'},
        ['AnMWagon'] = {guid = 'e0467b'},
        ['AnMBarn'] = {guid = '306ca2'}
    }},
    ['CoC'] = {guid = 'd3189b', contents = {
        ['CoCCount'] = {guid = 'fba388'},
        ['CoCStartingTiles'] = {guid = 'af8d39', contents = {
            [1] = {guid = '9c4fe7'},
            [2] = {guid = 'a6ff3c'},
            [3] = {guid = '9fd64f'},
            [4] = {guid = 'b0410c'},
            [5] = {guid = '78d5ee'},
            [6] = {guid = '8a1ed2'},
            [7] = {guid = 'a0ef6a'},
            [8] = {guid = '31cbd2'},
            [9] = {guid = '49a323'},
            [10] = {guid = '78a086'},
            [11] = {guid = '5cc6c2'},
            [12] = {guid = '233a1a'},
        }}
    }},
    ['KnRB'] = {guid = '927621', contents = {
        ['KnRBTiles'] = {guid = 'f5773a'},
        ['KnRBKing'] = {guid = 'c3021c'},
        ['KnRBRobber'] = {guid = '26c11d'}
    }},
    ['Cult'] = {guid = 'da553b', contents = {
        ['CultTiles'] = {guid = '96ff26'},
        ['CultBonusTile'] = {guid = '754953'}
    }},
    ['Catapult'] = {guid = 'e6d35f', contents = {
        ['CatapultTiles'] = {guid = '686f5b'},
        ['CatapultKnockOut'] = {guid = '158e59'},
        ['CatapultSeduction'] = {guid = 'b0bb3a'},
        ['CatapultTarget'] = {guid = '61b65e'},
        ['CatapultCatch'] = {guid = '075ec5'}
    }},
    ['BCnB'] = {guid = '59c769', contents = {
        ['BCnBTiles'] = {guid = '10f82c'},
        ['BCnBBridges'] = {guid = '16090d'},
        ['BCnBCastles'] = {guid = 'ee8c46'}
    }},
    ['HnS'] = {guid = 'a50c27', contents = {
        ['HnSTiles'] = {guid = '3fb950'},
        ['HnSSheepBag'] = {guid = '12bf5b'}
    }},
    ['WoF'] = {guid = '6feb10', contents = {
        ['WoFTiles'] = {guid = '71aa80'},
        ['WoFWheelTiles'] = {guid = 'ee3e97'},
        ['WoFStartingTiles'] = {guid = '6a31db', contents = {
            [1] = {guid = 'c7bc6d'},
            [2] = {guid = 'c391bc'},
            [3] = {guid = '7e508f'},
            [4] = {guid = '01f705'},
            [5] = {guid = '983022'},
            [6] = {guid = 'a39cb0'},
            [7] = {guid = 'f28f77'},
            [8] = {guid = '744e80'},
            [9] = {guid = '79956d'},
            [10] = {guid = '466a78'},
            [11] = {guid = '1d5025'},
            [12] = {guid = '2faa15'},
            [13] = {guid = '21cc72'},
            [14] = {guid = '8e2c6f'},
            [15] = {guid = '2c3d25'},
            [16] = {guid = '9dc2d2'},
        }},
        ['WoFWheel'] = {guid = 'ef0143'},
        ['WoFPig'] = {guid = '97e9dc'}
    }},
    ['River'] = {guid = '51fd29', contents = {
        ['RiverSpringTile'] = {guid = 'bec44f'},
        ['RiverLakeTile'] = {guid = 'f85830'},
        ['RiverBodyTiles'] = {guid = 'd5e587'},
    }},
    ['RiverII'] = {guid = '5a29f0', contents = {
        ['RiverForkTile'] = {guid = '5a8213'},
        ['RiverSpringTile'] = {guid = '0e6627'},
        ['RiverLakeTile'] = {guid = 'a423e8'},
        ['RiverBodyTiles'] = {guid = 'c6344e'},
    }},
    ['RiverBB5'] = {guid = '592f3a', contents = {
        ['RiverSpringTile'] = {guid = '553392'},
        ['RiverLakeTile'] = {guid = 'b9de5a'},
        ['RiverBodyTiles'] = {guid = 'e9d3b0'},
    }},
    --Mini Expansions
    ['Flier'] = {guid = 'a50c26', contents = {
        ['FlierTiles'] = {guid = 'f006d5'},
        ['FlierDie'] = {guid = 'dc7bf3'}
    }},
    ['Ferries'] = {guid = '5506dd', contents = {
        ['FerriesTiles'] = {guid = 'd6deb6'}
    }},
    ['Goldmines'] = {guid = '080d67', contents = {
        ['GoldminesTiles'] = {guid = 'bc8fac'},
        ['GoldminesGold'] = {guid = 'd013b9'}
    }},
    ['MnW'] = {guid = '6d63e1', contents = {
        ['MnWTiles'] = {guid = 'a6165e'}
    }},
    ['Robbers'] = {guid = 'b367f2', contents = {
        ['RobbersTiles'] = {guid = 'e7f85f'}
    }},
    --Micro Expansions
    ['GamesQuarterly'] = {guid = 'c97cee', contents = {
        ['GamesQuarterlyTiles'] = {guid = '235648'},
        ['RiverSpringTile'] = {guid = '873113'},
        ['RiverBodyTiles'] = {guid = '2d5d36'}
    }},
    ['RussianPromo'] = {guid = 'bdeb95', contents = {
        ['RussianPromoTiles'] = {guid = 'd47ccc'}
    }},
    ['SpielPromo'] = {guid = '1e48bf', contents = {
        ['SpielPromoTiles'] = {guid = '9129b0'}
    }}
}


-- Globals - These values are accessible in every function. They often contain crucial game information and are persisted between saves by the onSave and onLoad functions

--tileGrid is a datastore for tile data after it has been processed. This data is generally more efficiently accessed than straight from the tiles themselves. The general structure is as follows:
--tileGrid[xIndex][zIndex] will contain a table representing data for a particular tile location, where xIndex and zIndex are distances from the center of the table in units of TILE_SPACING. This is offset by MIDDLE_OFFSET (required due to a bug when using negative indices when serializing)
--in each of these tile locations, the following data can be found:
--  tile_GUID - the GUID of the tile at this location
--  rotation - the rotation of the tile
--  featureMap - a map of the standard featureLocations (1-12) to featureNums, which can be used as an index into featureList to get more data
--  specialFeatureLocations - a map of specialFeatures to their non-standard locations (given as {x=0.0, z=0.0} where the x and z are scaler locations of the feature within the tile (0.0, 0.0 being the center))
--  (optional) tileFeatures - a table of features of the tile, which does not correspond to any other feature located in the tile
--  (optional) ignoredFeatures - a table of standard locations that should not be used when finding the closest feature to a figure
tileGrid = {}
lastPlacedTileX = nil
lastPlacedTileZ = nil

--the next available featureNum that can be used for featureList. This is incremented for each new feature. Discarded featureNums are not recycled.
featureIndex = 1

--list of all features that have been added to the game with their defining characteristics. For each feature, which can be indexed with a featureNum, the following data is available:
--  nameOfFeature - Name of the feature
--  numTiles - The number of tiles that make up this feature. This often, but doesn't always, correlate with score.
--  numOpenings - Number of "openings" that need to be completed before the feature is completed. An opening is defined as a full tile side.
--  openingCoords - table of remaining opening coordinates for proximity features (indexed by a string in the form of [xIndex .. "-" .. zIndex] = true)
--  specialFeatures - specialFeatures associated with this feature
--  (optional) featureLocation - coordinates of this feature. Useful for locating a proximity feature.
featureList = {}

--features that have a special "link" together. Each linked feature will be indexed by its featureNum to a table containing all linked features (each indexed itself). ie (linkedFeatures['City-Field'][3] = {[5]=true, [12]=true})
linkedFeatures = {['City-Field'] = {}, ['Road Intersection'] = {}}

droplock = false
spamLock = false
scoring = false

wagonFeatures = {}

currentMiniTurn = nil --used when the player order must be iterated within someone's turn

followersScored = {}
earnedPointsThisTile = {}
removedFigures = {}
featureMarkers = {}
scoringRewards = {}

largestCity = 0
longestRoad = 0
scoreSummary = {}
activePlayers = {}
currentPlayer = nil

lastPlacedPlayerTiles = {}

shepherdAwaitingAction = nil
newBarn = nil
hasBuilderAwaitingAction = false
hasAlreadyTakenBuilderTile = false
hasRansomedPrisoner = false
buriedTile = nil
dragonHasAwaken = false
dragonMovesRemaining = 6
dragonIllegalTiles = {}
tileHasVolcano = false
tileHasMagicPortal = false
hasAlreadyUsedMagicPortal = false
flier = nil
flierOffset = nil
flierDirection = nil
hasAlreadyUsedFlier = false
seducedKnights = {}
carcassonneFigures = nil
barnFeatureNumbers = nil
wofPigPosition = 1

turnState = "pre-game"

tileStack_GUID = '16d9db'
startingTile_GUID = 'c107f0'
startingRiverTile_GUID = nil
forkTile_GUID = nil
springTile_GUID = nil
lakeTile_GUID = nil
riverBodyTiles_GUID = nil
finalTile_GUID = nil

fairy_GUID = nil
dragon_GUID = nil
flierDie_GUID = nil

--debugLogTabIndex = -1
--gameLogTabIndex = -1

score_counter_guids = {
    ['Green'] = '28bdff',
    ['Pink'] = '7ef326',
    ['Purple'] = 'f206e4',
    ['Blue'] = '9d1e70',
    ['Red'] = '4e3519',
    ['White'] = '1ecf3f'
}

figurepad_GUIDs = {
    ['Green'] = 'cee9ef',
    ['Purple'] = '7b6639',
    ['White'] = 'b013fc',
    ['Blue'] = '37df2f',
    ['Red'] = '4a5985',
    ['Pink'] = '7ed1bb'
}

--The corresponding hand color for this player color (can use a custom color)
handColor = {
    ['Green'] = 'Green',
    ['Purple'] = 'Purple',
    ['White'] = 'White',
    ['Blue'] = 'Blue',
    ['Red'] = 'Red',
    ['Pink'] = 'Pink'
}

player_color_tints = {}

figurePositions = {}

activeFigures = {}

player_possession_areas = {
    ['Green'] = {x=28.35, z=12.1, rotation=3},
    ['Purple'] = {x=28.35, z=-12.1, rotation=3},
    ['White'] = {x=12.1, z=-28.35, rotation=2},
    ['Blue'] = {x=-12.1, z=-28.35, rotation=2},
    ['Red'] = {x=-28.35, z=-12.1, rotation=1},
    ['Pink'] = {x=-28.35, z=12.1, rotation=1}
}
playerPossessionScriptingZones = {}

showMarkers = 'Both'
showMarkersButtonParam = {
    index = 0, click_function = 'showMarkersToggleButton',
    position = {-0.8,0.1,0.0}, width = 750, height=600, font_size = 150, function_owner = nil
}

endGameButtonParam = {
    index = 1, click_function = 'startGameButton',
    position = {1.0, 0.1, 0.0}, width = 750, height=600, font_size = 150, function_owner = nil
}

skipTurnButtonParam = {
   index = 2, click_function = 'skipTurnButton',
   position = {2.8, 0.1, 0.0}, width = 750, height=600, font_size = 150, function_owner = nil
}

--default control panel settings are defined here
controlPanelSettings = {
--pg 1
    --Language
    ['currentLanguage'] = 'en-us',
    --Hotseat or AI control settings (nil means default color control)
    ['GreenControl'] = nil,
    ['PurpleControl'] = nil,
    ['WhiteControl'] = nil,
    ['BlueControl'] = nil,
    ['RedControl'] = nil,
    ['PinkControl'] = nil,
    --Starting tiles
    ['StartingTileBase'] = true,
    ['StartingTileRiver'] = false,
    ['StartingTileRiverII'] = false,
    ['StartingTileRiverBB5'] = false,
    ['StartingTileCoC'] = false,
    ['StartingTileWoF'] = false,
    ['StartingTileSchool'] = false,
    ['StartingTileWindRoses'] = false,
--pg 2
    --Base + Major expansions
    ['BaseTiles'] = true,
    ['BaseFollower'] = true,
    ['BaseNumFollowers'] = 7,
    ['InCTiles'] = false,
    ['InCBigFollower'] = false,
    ['InCInns'] = false,
    ['InCCathedrals'] = false,
    ['TnBTiles'] = false,
    ['TnBBuilder'] = false,
    ['TnBPig'] = false,
    ['TnBTradeGoods'] = false,
    ['PnDTiles'] = false,
    ['PnDDragon'] = false,
    ['PnDFairy'] = false,
    ['PnDMagicPortal'] = false,
    ['PnDPrincess'] = false,
    ['TowerTiles'] = false,
    ['TowerTowers'] = false,
    ['TowerNumTowers'] = 10,
--pg 3
    ['AnMTiles'] = false,
    ['AnMAbbey'] = false,
    ['AnMMayor'] = false,
    ['AnMWagon'] = false,
    ['AnMBarn'] = false,
    ['KnRBTiles'] = false,
    ['KnRBKing'] = false,
    ['KnRBRobber'] = false,
    ['CultTiles'] = false,
    ['CatapultTiles'] = false,
    ['BCnBTiles'] = false,
    ['BCnBBazaars'] = false,
    ['BCnBBridges'] = false,
    ['BCnBNumBridges'] = 3,
    ['BCnBCastles'] = false,
    ['BCnBNumCastles'] = 3,
    ['HnSTiles'] = false,
    ['HnSShepherd'] = false,
    ['HnSHills'] = false,
    ['HnSVineyards'] = false,
--pg 4
    ['WoFTiles'] = false,
    ['WoFWheelTiles'] = false,
    ['WoFCrowns'] = false,
    ['WoFFortune'] = false,
    ['WoFTaxes'] = false,
    ['WoFFamine'] = false,
    ['WoFStorm'] = false,
    ['WoFInquisition'] = false,
    ['WoFPlague'] = false,
    --Mini expansions
    ['FlierTiles'] = false,
    ['FlierFlier'] = false,
    ['FerriesTiles'] = false,
    ['FerriesFerries'] = false,
    ['GoldminesTiles'] = false,
    ['GoldminesGold'] = false,
--pg 5
    --Micro expansions
    ['GamesQuarterlyTiles'] = false,
    ['Phantoms'] = false,
    ['SpielPromoTiles'] = false,
    ['RussianPromoTiles'] = false,
--pg 6
    --House rules
    ['BaseDisableRoads'] = false,
    ['BaseDisableCities'] = false,
    ['BaseDisableCloisters'] = false,
    ['BaseDisableFarms'] = false,
    ['BaseNerfSmallCity'] = false,
    ['TowerNerfTowers'] = false,
    ['RiverMixAll'] = false,
    ['RIIDisablePigherd'] = false,
    ['CoCNoCount'] = false,
}

#include !\TTSCarcassonne\scripts\localization

#include !\TTSCarcassonne\scripts\state_machine

#include !\TTSCarcassonne\scripts\setup_game

#include !\TTSCarcassonne\scripts\tts_events

#include !\TTSCarcassonne\scripts\hint_markers

#include !\TTSCarcassonne\scripts\move_validation

#include !\TTSCarcassonne\scripts\feature_map_management

#include !\TTSCarcassonne\scripts\tile_traversal

#include !\TTSCarcassonne\scripts\ai

#include !\TTSCarcassonne\scripts\debug

#include !\TTSCarcassonne\scripts\helper_functions

#include !\TTSCarcassonne\scripts\game_logic
