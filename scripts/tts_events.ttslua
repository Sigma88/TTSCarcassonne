--Here are all of the events triggered by TTS. These are the entry points to all of the code.

--onload and onsave
--
--manages save games by saving script data in onsave and restoring it in onload
--onload also re-creates global game buttons and  returns to the previously saved state once loading is finished.
--NOTE: the game is not considered 100% save compatible due to issues with the TTS API
--for example, an object in the middle of a setPositionSmooth will not continue moving when loaded
--though whenever the game is awaiting user interaction, it should be 99% save compatible

function onload(save_state)
    if save_state ~= nil then
        local saved_data = JSON.decode(save_state)
        featureList = saved_data.featureList
        linkedFeatures = saved_data.linkedFeatures
        featureIndex = saved_data.featureIndex
        unusedTiles = saved_data.unusedTiles
        buriedTiles = saved_data.buriedTiles
        validTileLocations = saved_data.validTileLocations
        tileConnectionOdds = saved_data.tileConnectionOdds
        tilesRemaining = saved_data.tilesRemaining
        buriedTileCount = saved_data.buriedTileCount
        controlPanelSettings = saved_data.controlPanelSettings
        showMarkers = saved_data.showMarkers
        tileGrid = saved_data.tileGrid
        if saved_data.FerriesLinkedQuadrants ~= nil then
            FerriesLinkedQuadrants = saved_data.FerriesLinkedQuadrants
        end
        startingTile_GUID = saved_data.startingTile_GUID
        startingRiverTile_GUID = saved_data.startingRiverTile_GUID
        forkTile_GUID = saved_data.forkTile_GUID
        springTile_GUID = saved_data.springTile_GUID
        lakeTile_GUID = saved_data.lakeTile_GUID
        riverBodyTiles_GUID = saved_data.riverBodyTiles_GUID
        finalRiverTile_GUID = saved_data.finalRiverTile_GUID
        finalTile_GUID = saved_data.finalTile_GUID
        fairy_GUID = saved_data.fairy_GUID
        dragon_GUID = saved_data.dragon_GUID
        flierDie_GUID = saved_data.flierDie_GUID
        lastPlacedTileX = saved_data.lastPlacedTileX
        lastPlacedTileZ = saved_data.lastPlacedTileZ
        lastPlacedPlayerTiles = saved_data.lastPlacedPlayerTiles
        if saved_data.scores ~= nil then
            for player, score in pairs(saved_data.scores) do
                local scoreCounter = getObjectFromGUID(score_counter_guids[player])
                if scoreCounter ~= nil then
                    scoreCounter.Counter.setValue(score)
                end
            end
        end
        figurePositions = saved_data.figurePositions
        activePlayers = saved_data.activePlayers
        currentPlayer = saved_data.currentPlayer
        scoreSummary = saved_data.scoreSummary
        largestCity = saved_data.largestCity
        longestRoad = saved_data.longestRoad
        playerPossessionScriptingZones = saved_data.playerPossessionScriptingZones
        player_color_tints = saved_data.player_color_tints
        score_counter_guids = saved_data.score_counter_guids
        figurepad_GUIDs = saved_data.figurepad_GUIDs
        handColor = saved_data.handColor
        player_possession_areas = saved_data.player_possession_areas
        turnState = saved_data.turnState
        wagonFeatures = saved_data.wagonFeatures
        seducedKnights = saved_data.seducedKnights
        carcassonneFigures = saved_data.carcassonneFigures
        wofPigPosition = saved_data.wofPigPosition
        numberActiveTowers = saved_data.numberActiveTowers
        towerX = saved_data.towerX
        towerZ = saved_data.towerZ
        currentMiniTurn = saved_data.currentMiniTurn
        shepherdAwaitingAction = saved_data.shepherdAwaitingAction
        newBarn = saved_data.newBarn
        hasBuilderAwaitingAction = saved_data.hasBuilderAwaitingAction
        hasAlreadyTakenBuilderTile = saved_data.hasAlreadyTakenBuilderTile
        hasRansomedPrisoner = saved_data.hasRansomedPrisoner
        buriedTile = saved_data.buriedTile
        dragonHasAwaken = saved_data.dragonHasAwaken
        dragonMovesRemaining = saved_data.dragonMovesRemaining
        dragonIllegalTiles = saved_data.dragonIllegalTiles
        tileHasVolcano = saved_data.tileHasVolcano
        tileHasMagicPortal = saved_data.tileHasMagicPortal
        hasAlreadyUsedMagicPortal = saved_data.hasAlreadyUsedMagicPortal
        flier = saved_data.flier
        flierOffset = saved_data.flierOffset
        flierDirection = saved_data.flierDirection
        hasAlreadyUsedFlier = saved_data.hasAlreadyUsedFlier
        earnedPointsThisTile = saved_data.earnedPointsThisTile
        removedFigures = saved_data.removedFigures
        if saved_data.featureMarker_GUIDs ~= nil then
            for _, featureMarker_GUID in ipairs(saved_data.featureMarker_GUIDs) do
                getObjectFromGUID(featureMarker_GUID).destruct()
            end
        end
    end

    local notes = Notes.getNotebookTabs()
    for _, note in ipairs(notes) do
        if note.title == "Debug Log" then
            debugLogTabIndex = note.index
        end
        if note.title == "Game Log" then
            gameLogTabIndex = note.index
        end
    end
    -- params = {}
    -- params.title = "Debug Log"
    -- params.body = "LOG START"
    -- params.color = "Grey"
    -- debugLogTabIndex = Notes.addNotebookTab(params)

    initializeButtons()
    --setLocalizedObjectNames()

    if activePlayers ~= nil and currentPlayer ~= nil then
        if controlPanelSettings[activePlayers[currentPlayer] .. 'Control'] == nil then
            allGameMessage({"MESSAGE_GAME_LOADED", {'{p1}', getPlayerOwnerName(activePlayers[currentPlayer])}, {'{s1}', turnState}}, player_color_tints[activePlayers[currentPlayer]], activePlayers[currentPlayer])
        else
            allGameMessage({"MESSAGE_GAME_LOADED", {'{p1}', activePlayers[currentPlayer]}, {'{s1}', turnState}}, player_color_tints[activePlayers[currentPlayer]], activePlayers[currentPlayer])
            allGameMessage({"MESSAGE_GAME_LOADED_CONTROL", {'{c1}', activePlayers[currentPlayer]}, {'{p1}', stringToBracketedHex(controlPanelSettings[activePlayers[currentPlayer] .. 'Control']) .. getPlayerOwnerName(activePlayers[currentPlayer])}}, player_color_tints[activePlayers[currentPlayer]], nil)
        end
        allGameMessage({"MESSAGE_GAME_LOADED_REWIND_NOTIFICATION"}, NEUTRAL_COLOR)
    else
      -- for i, player in ipairs(getSeatedPlayers()) do
      --   local button_parameters = {}
      --     button_parameters.input_function = 'test_function'
      --     button_parameters.function_owner = Global
      --     button_parameters.label = '(Optional) Player Name - Will use steam name if left empty'
      --     button_parameters.position = {0.0, 0.0, 1.5}
      --     button_parameters.width = 1500
      --     button_parameters.height = 500
      --     button_parameters.font_size = 150
      --     button_parameters.font_color = {1, 0, 0}
      --     button_parameters.alignment = 2
      --     button_parameters.value = ''
      --     getObjectFromGUID(figurepad_GUIDs[player]).createInput(button_parameters)
      -- end
    end
    math.randomseed(os.time())
    progressPartiallyCompleteStates()
    if turnState ~= 'pre-game' then
        if turnState ~= 'game over - scoring' then
            createRansomButtons()
            highlightLastPlacedTiles()
        end
        return stateHandler()
    end
    getObjectFromGUID(BUTTON_ANCHOR_GUID).interactable = false
end

function onSave()
    --retrieve scores
    local scores = {}
    for player, scoreCounter_GUID in pairs(score_counter_guids) do
        local scoreCounter = getObjectFromGUID(scoreCounter_GUID)
        if scoreCounter ~= nil then
            scores[player] = scoreCounter.Counter.getValue()
        end
    end
    local featureMarker_GUIDs = {}
    if featureMarkers ~= nil then
        for i, featureMarker in ipairs(featureMarkers) do
            featureMarker_GUIDs[i] = featureMarker.getGUID()
        end
    end
    local toSave = {
        --settings changed by the control panel
        controlPanelSettings = controlPanelSettings,
        --setting for which markers should be shown
        showMarkers = showMarkers,
        --global storage of all active (in-play) tile information
        tileGrid = tileGrid,
        FerriesLinkedQuadrants = FerriesLinkedQuadrants,
        featureList = featureList,
        linkedFeatures = linkedFeatures,
        featureIndex = featureIndex,
        startingTile_GUID = startingTile_GUID,
        unusedTiles = unusedTiles,
        buriedTiles = buriedTiles,
        validTileLocations = validTileLocations,
        tileConnectionOdds = tileConnectionOdds,
        tilesRemaining = tilesRemaining,
        buriedTileCount = buriedTileCount,
        --keep track of these tiles to control the order that the AI places them
        startingRiverTile_GUID = startingRiverTile_GUID,
        forkTile_GUID = forkTile_GUID,
        springTile_GUID = springTile_GUID,
        lakeTile_GUID = lakeTile_GUID,
        riverBodyTiles_GUID = riverBodyTiles_GUID,
        finalRiverTile_GUID = finalRiverTile_GUID,
        finalTile_GUID = finalTile_GUID,
        --specific neutral figures that need to be tracked runtime
        fairy_GUID = fairy_GUID,
        dragon_GUID = dragon_GUID,
        flierDie_GUID = flierDie_GUID,
        --the most recent tile position placed
        lastPlacedTileX = lastPlacedTileX,
        lastPlacedTileZ = lastPlacedTileZ,
        lastPlacedPlayerTiles = lastPlacedPlayerTiles,
        scores = scores,
        figurePositions = figurePositions,
        activePlayers = activePlayers,
        currentPlayer = currentPlayer,
        scoreSummary = scoreSummary,
        largestCity = largestCity,
        longestRoad = longestRoad,
        playerPossessionScriptingZones = playerPossessionScriptingZones,
        --the following is only changed when using substitute colors
        player_color_tints = player_color_tints,
        score_counter_guids = score_counter_guids,
        figurepad_GUIDs = figurepad_GUIDs,
        handColor = handColor,
        player_possession_areas = player_possession_areas,
        --the following is partial turn data
        turnState = turnState,
        --wagonLocations = wagonLocations,
        wagonFeatures = wagonFeatures,
        seducedKnights = seducedKnights,
        carcassonneFigures = carcassonneFigures,
        wofPigPosition = wofPigPosition,
        numberActiveTowers = numberActiveTowers,
        towerX = towerX,
        towerZ = towerZ,
        --hasAvailableWagonFeature = hasAvailableWagonFeature,
        currentMiniTurn = currentMiniTurn,
        shepherdAwaitingAction = shepherdAwaitingAction,
        newBarn = newBarn,
        hasBuilderAwaitingAction = hasBuilderAwaitingAction,
        hasAlreadyTakenBuilderTile = hasAlreadyTakenBuilderTile,
        hasRansomedPrisoner = hasRansomedPrisoner,
        --the following is partial state data (for when a state doesn't completely finish)
        buriedTile = buriedTile,
        dragonHasAwaken = dragonHasAwaken,
        dragonIllegalTiles = dragonIllegalTiles,
        dragonMovesRemaining = dragonMovesRemaining,
        tileHasVolcano = tileHasVolcano,
        tileHasMagicPortal = tileHasMagicPortal,
        hasAlreadyUsedMagicPortal = hasAlreadyUsedMagicPortal,
        flier = flier,
        flierOffset = flierOffset,
        flierDirection = flierDirection,
        hasAlreadyUsedFlier = hasAlreadyUsedFlier,
        earnedPointsThisTile = earnedPointsThisTile,
        removedFigures = removedFigures,
        --if script was in the middle of making feature markers or deleting, delete them after loading
        featureMarker_GUIDs = featureMarker_GUIDs
    }
    return JSON.encode(toSave)
end



m_Routines = {}

--[[ The Update function. This is called once per frame. --]]
function update()
    --this replaces the built-in coroutine functions, since the built-in ones have the unfortunate side-effect that they continue to run after loading a game. These will not.
    --Update: this may have been fixed in a recent TTS update. The build-in ones should now cancel when the game is loaded
    --However, I'm leaving this alternate system since it should be functionally identical
    local iNumRoutines = #m_Routines

    for i = iNumRoutines, 1, -1 do
        local sStatus = coroutine.status(m_Routines[i].Co)
        --resume all coroutines with yield 0
        if sStatus == 'suspended' and m_Routines[i].iYield == 0 then
            local bRes = false
            local iYield = 0

            bRes, iYield = coroutine.resume(m_Routines[i].Co) --resume the coroutine and save the value from yield (to allow to use e.g. yield(1) to not have it resumed automatically)

            iYield = iYield or 0 --default to 0 (-> both .yield() and .yield(0) works)
            m_Routines[i].iYield = iYield
        --clear finished routines
        elseif sStatus == 'dead' then
            table.remove(m_Routines, i)
        end
    end
end

--this manages some controlPanelSettings, such as hotseats and some settings that are dependent on the number of players
--it should be called before object onPlayerChangedColor scripts are called (VERY IMPORTANT)
function onPlayerChangedColor(player_color)
    local numPlayers = 0
    for _, color in ipairs(PLAYER_COLORS) do
        if Player[color].seated and controlPanelSettings[color .. 'Control'] ~= nil then
            allGameMessage({"MESSAGE_HOTSEAT_TAKEN", {'{p1}', stringToBracketedHex(controlPanelSettings[color .. 'Control']) .. getPlayerOwnerName(color) .. RGBToBracketedHex(NEUTRAL_COLOR)}, {'{c1}', stringToBracketedHex(color) .. translate(color) .. RGBToBracketedHex(NEUTRAL_COLOR)}}, NEUTRAL_COLOR)
            controlPanelSettings[color .. 'Control'] = value
        end
        if controlPanelSettings[color .. 'Control'] ~= nil and controlPanelSettings[color .. 'Control']:sub(1,2) ~= 'AI' and not Player[controlPanelSettings[color .. 'Control']].seated then
            allGameMessage({"MESSAGE_HOTSEAT_OWNER_MOVED", {'{c1}', stringToBracketedHex(color) .. translate(color) .. RGBToBracketedHex(NEUTRAL_COLOR)}, {'{c2}', stringToBracketedHex(controlPanelSettings[color .. 'Control']) .. translate(controlPanelSettings[color .. 'Control']) .. RGBToBracketedHex(NEUTRAL_COLOR)}}, stringColorToRGB(color))
            controlPanelSettings[color .. 'Control'] = nil
        end
        if Player[color].seated or controlPanelSettings[color .. 'Control'] ~= nil then
            numPlayers = numPlayers + 1
        end
    end
    if gameIsActive() then
        if turnState == 'begin turn' and player_color == activePlayers[currentPlayer] then
            return Timer.create({identifier=os.clock(), function_name='currentPlayerControllerChanged', function_owner=Global, parameters={currentPlayer=player_color, newCurrentPlayerControl=controlPanelSettings[player_color .. 'Control']}, delay=2})
        end
        return
    end
    controlPanelSettings['TowerNumTowers'] = NUM_TOWERS_PER_PLAYER[numPlayers]
    if controlPanelSettings['TowerTowers'] then
        allGameMessage({"MESSAGE_TOWER_COUNT_CHANGED", {'{n1}', NUM_TOWERS_PER_PLAYER[numPlayers]}}, NEUTRAL_COLOR, nil)
    end
end

function onObjectSpawn(spawned_object)
    --This is intended to be called when a tile is drawn from the stack.
    if tostring(spawned_object) == 'Card(Clone) (LuaGameObjectScript)' then
        local specialFeatures = spawned_object.getTable('specialFeatures')
        if specialFeatures ~= nil then
            for _, specialFeature in ipairs(specialFeatures) do
                if controlPanelSettings['PnDDragon'] and specialFeature[1] == "Dragon" then
                    if not dragonHasAwaken then
                        gameNotification({"MESSAGE_DRAGON_TILE_DRAWN_BEFORE_AWAKENED"}, NEUTRAL_COLOR, activePlayers[currentPlayer])
                    end
                end
            end
        end
    end
end

function onObjectDestroyed(dying_object)
    --when the 2nd to last card in the deck is drawn, the deck is destroyed, even though one card remains
    --this causes an issue when a script needs to draw the last card and doesn't know where it is
    --this code is meant to work around that problem
    if dying_object.getGUID() == tileStack_GUID or dying_object.getGUID() == riverBodyTiles_GUID then
        local allObjects = getAllObjects()
        for _, obj in ipairs(allObjects) do
            if tostring(obj) == 'Card(Clone) (LuaGameObjectScript)' then
                local dX = dying_object.getPosition().x - obj.getPosition().x
                local dZ = dying_object.getPosition().z - obj.getPosition().z
                local rad = 0.01
                if dX<rad and dX>-rad and dZ<rad and dZ>-rad then
                    if obj.held_by_color == nil and obj.getGUID() ~= lastDrawnTile_GUID then
                        if dying_object.getGUID() == tileStack_GUID then
                            finalTile_GUID = obj.getGUID()
                        elseif dying_object.getGUID() == riverBodyTiles_GUID then
                            finalRiverTile_GUID = obj.getGUID()
                        end
                    end
                end
            end
        end
        if dying_object.getGUID() == riverBodyTiles_GUID then
            riverBodyTiles_GUID = nil
        end
    end
end

--called when the flier die is rolled. Checks to make sure the last player to pick it up was the player eligible to roll
function onFlierDiceRolled(params)
    if params.sPlayer ~= nil then
        player = params.sPlayer
        if (currentMiniTurn ~= nil and (player == activePlayers[currentMiniTurn] or player == getCurrentPlayerOwner())) or
            (currentMiniTurn == nil and (player == activePlayers[currentPlayer] or player == getCurrentPlayerOwner())) then
            if turnState == 'wait for flier roll' or 'wait for flier roll - phantom' then
                local dieValue = getObjectFromGUID(flierDie_GUID).getValue()
                if dieValue > 3 then dieValue = 7 - dieValue end
                flierOffset = {x=DIAGONAL_DELTA[flierDirection].x * dieValue, z=DIAGONAL_DELTA[flierDirection].z * dieValue}
                --debugMessage(1, "Flier direction: " .. flierDirection .. " Flier destination offset: x: " .. flierOffset.x .. " z: " .. flierOffset.z)
                allGameMessage({"MESSAGE_FLIER_DIE_ROLL", {'{p1}', activePlayers[currentPlayer]}, {'{n1}', dieValue}}, player_color_tints[activePlayers[currentPlayer]], activePlayers[currentPlayer])
                return nextState('die rolled')
            else
                --allErrorMessage("It is currently not allowed to roll the flier die. You are only allowed to roll the die after you've placed a follower on the flier feature. Current state: " .. turnState, params.sPlayer)
            end
        else
            playerErrorMessage({"MESSAGE_FLIER_WRONG_PLAYER_ROLLED"}, params.sPlayer)
        end
    end
end

-- Activates whenever any object is dropped
function onObjectDrop(player, droppedObject)
    if turnState == 'pre-game' then
        if tostring(droppedObject) == 'Card(Clone) (LuaGameObjectScript)' then
            if not spamLock then
                playerErrorMessage({"MESSAGE_DROP_GAME_NOT_STARTED"}, player)
                spamLock = true
                Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters=nil, delay=SPAM_DELAY})
            end
        end
        return
    end
    if turnState == 'game over - finished' then
        -- FIXME: needs a custom message
        -- if tostring(droppedObject) == 'Card(Clone) (LuaGameObjectScript)' then
        --     if not spamLock then
        --         playerErrorMessage({"MESSAGE_DROP_GAME_NOT_STARTED"}, player)
        --         spamLock = true
        --         Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters=nil, delay=SPAM_DELAY})
        --     end
        -- end
        return
    end
    if (currentMiniTurn ~= nil and (player == activePlayers[currentMiniTurn] or player == getCurrentPlayerOwner())) or
        (currentMiniTurn == nil and (player == activePlayers[currentPlayer] or player == getCurrentPlayerOwner())) then
        for _, featureMarker in ipairs(featureMarkers) do
            featureMarker.destruct()
        end
        featureMarkers = {}
        if not dropLock then
            dropLock = true
            lastDroppedObject_GUID = droppedObject.getGUID() --global used for the coroutines
            lastDroppedTime = os.clock()
            -- Checks if the dropped object was a single 'card' (tile)
            if tostring(droppedObject) == 'Card(Clone) (LuaGameObjectScript)' then
                if turnState == 'awaiting tile placement' then
                    Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='checkTile', function_owner=nil, parameters={time=lastDroppedTime}, delay=TILE_PLACEMENT_DELAY})
                else
                    dropLock = false
                    if not spamLock then
                        allErrorMessage({"MESSAGE_TILE_NOT_ALLOWED", {'{s1}', turnState}}, player)
                        spamLock = true
                        Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters=nil, delay=SPAM_DELAY})
                    end
                end
            elseif table.contains(FOLLOWER_TYPES, droppedObject.getVar('figureName')) or table.contains(SPECIAL_FIGURE_TYPES, droppedObject.getVar('figureName')) or droppedObject.getVar('figureName') == 'Tower' then
                if (currentMiniTurn ~= nil and (droppedObject.getVar('owner') == activePlayers[currentMiniTurn])) or
                    (currentMiniTurn == nil and (droppedObject.getVar('owner') == activePlayers[currentPlayer])) then
                    if turnState == 'awaiting figure decision'
                        or turnState == 'replace finished wagons'
                        or turnState == 'awaiting flier decision'
                        or turnState == 'awaiting flier decision - phantom'
                        or turnState == 'awaiting phantom decision'
                        or turnState == 'prompt moving to carcassonne'
                        or turnState == 'prompt moving from carcassonne'
                        or turnState == 'game over - prompt moving from carcassonne' then
                        Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='checkFigurePlacement', function_owner=nil, parameters={time=lastDroppedTime}, delay=FIGURE_PLACEMENT_DELAY})
                    else
                        dropLock = false
                        if not spamLock then
                            if droppedObject.getVar('figureName') == 'Tower' then
                                allErrorMessage({"MESSAGE_TOWER_NOT_ALLOWED", {'{s1}', turnState}}, player)
                            elseif droppedObject.getVar('figureName') == 'Phantom' then
                                allErrorMessage({"MESSAGE_PHANTOM_NOT_ALLOWED", {'{s1}', turnState}}, player)
                            else
                                allErrorMessage({"MESSAGE_FIGURE_NOT_ALLOWED", {'{s1}', turnState}}, player)
                            end
                            spamLock = true
                            Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters={time=lastDroppedTime}, delay=SPAM_DELAY})
                        end
                    end
                else
                    dropLock = false
                    if not spamLock then
                        if droppedObject.getVar('figureName') == 'Tower' then
                            playerErrorMessage({"MESSAGE_TOWER_WRONG_OWNER"}, player)
                        elseif droppedObject.getVar('figureName') == 'Bridge' then
                            playerErrorMessage({"MESSAGE_BRIDGE_WRONG_OWNER"}, player)
                        else
                            playerErrorMessage({"MESSAGE_FIGURE_WRONG_OWNER"}, player)
                        end

                        spamLock = true
                        Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters=nil, delay=SPAM_DELAY})
                    end
                end
            elseif droppedObject.getVar('figureName') == 'Fairy' then
                if turnState == 'awaiting figure decision' then
                    Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='checkFigurePlacement', function_owner=nil, parameters={time=lastDroppedTime}, delay=FIGURE_PLACEMENT_DELAY})
                    if highlightedTiles ~= nil then
                        for x, highlightedColumn in pairs(highlightedTiles) do
                            for z, _ in pairs(highlightedColumn) do
                                getObjectFromGUID(tileGrid[x][z].tile_guid).highlightOff()
                            end
                        end
                    end
                else
                    dropLock = false
                    if not spamLock then
                        allErrorMessage({"MESSAGE_FAIRY_NOT_ALLOWED", {'{s1}', turnState}}, player)
                        spamLock = true
                        Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters={time=lastDroppedTime}, delay=SPAM_DELAY})
                    end
                end
            elseif droppedObject.getVar('figureName') == 'Count' then
                if turnState == 'prompt moving count' then
                    Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='checkFigurePlacement', function_owner=nil, parameters={time=lastDroppedTime}, delay=FIGURE_PLACEMENT_DELAY})
                else
                    dropLock = false
                    if not spamLock then
                        allErrorMessage({"MESSAGE_COUNT_NOT_ALLOWED", {'{s1}', turnState}}, player)
                        spamLock = true
                        Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters={time=lastDroppedTime}, delay=SPAM_DELAY})
                    end
                end
            else
                dropLock = false
            end
        else
            if not spamLock then
                allErrorMessage({"MESSAGE_DROP_SPAM"}, player)
                spamLock = true
                Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters=nil, delay=SPAM_DELAY})
            end
        end
    else
        if not spamLock then
            playerErrorMessage({"MESSAGE_DROP_WRONG_PLAYER"}, player)
            spamLock = true
            Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters=nil, delay=SPAM_DELAY})
        end
    end
end

function spamUnlock()
    spamLock = false
end

function onObjectPickUp(player, pickedUpObject)
    if lastDroppedObject_GUID == pickedUpObject.getGUID() then
        dropLock = false
        lastDroppedTime = 0
    end

    if tostring(pickedUpObject) == 'Card(Clone) (LuaGameObjectScript)' and pickedUpObject.getTable('sides') ~= nil then
        pickedUpObject.clearButtons()
        local xPosition = (pickedUpObject.getPosition().x + MIDDLE_OFFSET.x) / TILE_SPACING
        local zPosition = (pickedUpObject.getPosition().z + MIDDLE_OFFSET.z) / TILE_SPACING
        local xIndex = math.floor(xPosition + TILE_PLACEMENT_MARGIN * TILE_SPACING)
        local zIndex = math.floor(zPosition + TILE_PLACEMENT_MARGIN * TILE_SPACING)
        if tileGridOccupied(xIndex, zIndex) and tileGrid[xIndex][zIndex].tile_guid == pickedUpObject.getGUID() then
            if lastPlacedTileX ~= nil then
                clearFigureOptions()
                seducedKnights = {}
            end
            if pickedUpObject.getGUID() == startingTile_GUID then
                startingTile_GUID = nil
            end
            if pickedUpObject.getGUID() == startingRiverTile_GUID then
                startingRiverTile_GUID = nil
            end
            lastPlacedTileX = nil
            removeTile(xIndex, zIndex, pickedUpObject)
            allGameMessage({"MESSAGE_TILE_REMOVED"}, NEUTRAL_COLOR)
            clearArbitraryButtons(true)
            turnState = 'awaiting tile placement'
            return stateHandler()
        end
    end

    if showMarkers == 'Hints' or showMarkers == 'Both' and
        ((currentMiniTurn ~= nil and (player == activePlayers[currentMiniTurn] or player == getCurrentPlayerOwner())) or
        (currentMiniTurn == nil and (player == activePlayers[currentPlayer] or player == getCurrentPlayerOwner()))) then
        for _, featureMarker in ipairs(featureMarkers) do
            featureMarker.destruct()
        end
        featureMarkers = {}
        if tostring(pickedUpObject) == 'Card(Clone) (LuaGameObjectScript)' and pickedUpObject.getTable('sides') ~= nil then
            if turnState == 'awaiting tile placement' then
                showTileMarkers(pickedUpObject)
            end
        elseif (table.contains(FOLLOWER_TYPES, pickedUpObject.getVar('figureName')) or table.contains(SPECIAL_FIGURE_TYPES, pickedUpObject.getVar('figureName')) or pickedUpObject.getVar('figureName') == 'Tower') and
            ((currentMiniTurn ~= nil and pickedUpObject.getVar('owner') == activePlayers[currentMiniTurn]) or
            (currentMiniTurn == nil and pickedUpObject.getVar('owner') == activePlayers[currentPlayer])) then
            gPickedUpObject = pickedUpObject
            if turnState == 'awaiting figure decision' then
                if pickedUpObject.getVar('figureName') == 'Tower' then
                    startLuaCoroutine(self, 'showTowerMarkers')
                else
                    startLuaCoroutine(self, 'showFigureMarkers')
                end
            elseif pickedUpObject.getVar('figureName') == 'Wagon' and turnState == 'replace finished wagons' then
                showWagonFeatureMarkers(pickedUpObject)
            elseif turnState == 'awaiting flier decision' or turnState == 'awaiting flier decision - phantom' then
                showFlierFeatureMarkers(pickedUpObject)
            elseif turnState == 'awaiting phantom decision' then
                startLuaCoroutine(self, 'showFigureMarkers')
            elseif turnState == 'prompt moving to carcassonne' then
                showToCoCFeatureMarkers(pickedUpObject)
            elseif turnState == 'prompt moving from carcassonne' or turnState == 'game over - prompt moving from carcassonne' then
                startLuaCoroutine(self, 'showFromCoCFeatureMarkers')
            end
        elseif pickedUpObject.getVar('figureName') == 'Fairy' and turnState == 'awaiting figure decision' then
            showFairyHighlights(pickedUpObject)
        elseif pickedUpObject.getVar('figureName') == 'Count' and turnState == 'prompt moving count' then
            showToCoCFeatureMarkers(pickedUpObject)
        end
    end
end
