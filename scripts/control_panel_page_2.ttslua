#include !\TTSCarcassonne\scripts\control_panel_common

ROW_1 = 6.5
ROW_2 = 1.1
ROW_3 = -2.95
ROW_4 = -7.1
ROW_5 = -11.4
COLUMN_1 = 7.9
COLUMN_2 = 6.25
COLUMN_3 = 2.95
COLUMN_4 = -0.4
COLUMN_5 = -3.75
COLUMN_6 = -7.1

numPlayers = 1

function onLoad()
    Timer.create({identifier='' .. os.clock(), function_name='initializeControlPanelPage', function_owner=nil, parameters=nil, delay=0.0001})
end

function initializeControlPanelPage()
    self.UI.setAttribute("BaseGameExpansionLabel", "text", translate("LABEL_BASE_GAME"))
    self.UI.setAttribute("BaseTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("BaseFollowersLabel", "text", translate("Followers"))
    self.UI.setAttribute("MajorExpansionsLabel", "text", translate("LABEL_MAJOR_EXPANSIONS"))
    self.UI.setAttribute("InCExpansionLabel", "text", "1. " .. translate("Inns & Cathedrals"))
    self.UI.setAttribute("InCTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("InCBigFollowerLabel", "text", translate("Big Follower"))
    self.UI.setAttribute("InCInnsLabel", "text", translate("Inns"))
    self.UI.setAttribute("InCCathedralsLabel", "text", translate("Cathedrals"))
    self.UI.setAttribute("TnBExpansionLabel", "text", "2. " .. translate("Traders & Builders"))
    self.UI.setAttribute("TnBTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("TnBBuilderLabel", "text", translate("Builder"))
    self.UI.setAttribute("TnBPigLabel", "text", translate("Pig"))
    self.UI.setAttribute("TnBTradeGoodsLabel", "text", translate("Trade Goods"))
    self.UI.setAttribute("PnDExpansionLabel", "text", "3. " .. translate("The Princess & The Dragon"))
    self.UI.setAttribute("PnDTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("PnDDragonLabel", "text", translate("Dragon"))
    self.UI.setAttribute("PnDFairyLabel", "text", translate("Fairy"))
    self.UI.setAttribute("PnDPortalsLabel", "text", translate("Portals"))
    self.UI.setAttribute("PnDPrincessLabel", "text", translate("Princess"))
    self.UI.setAttribute("TowerExpansionLabel", "text", "4. " .. translate("The Tower"))
    self.UI.setAttribute("TowerTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("TowerTowersLabel", "text", translate("Towers"))
    self.UI.setAttribute("PreviousPageLabel", "text", translate("LABEL_PREVIOUS_PAGE"))
    self.UI.setAttribute("NextPageLabel", "text", translate("LABEL_NEXT_PAGE"))

    button_parameters.click_function = 'onBaseFollowersDecr'
    button_parameters.label = '-'
    button_parameters.tooltip = ''
    button_parameters.position = {COLUMN_3 + 1, BUTTON_HEIGHT, ROW_1}
    self.createButton( button_parameters )
    btnIDs['btnBaseFollowersDecr'] = index
    index = index + 1

    button_parameters.click_function = 'onBaseFollowerToggle'
    button_parameters.position = {COLUMN_3, BUTTON_HEIGHT, ROW_1}
    button_parameters.tooltip = translate("TOOLTIP_FOLLOWER")
    button_parameters.label = '7'
    self.createButton( button_parameters )
    btnIDs['btnBaseFollowerToggle'] = index
    index = index + 1

    button_parameters.click_function = 'onBaseFollowersIncr'
    button_parameters.label = '+'
    button_parameters.tooltip = ''
    button_parameters.position = {COLUMN_3 - 1, BUTTON_HEIGHT, ROW_1}
    self.createButton( button_parameters )
    btnIDs['btnBaseFollowersIncr'] = index
    index = index + 1

-- Base game
    initializeCheckbox(COLUMN_2, ROW_1, 'BaseTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 71}}))

--Inns & Cathedrals
    initializeAllCheckbox(COLUMN_1, ROW_2, 'InCAll', translate("TOOLTIP_ENABLE_ALL"))
    initializeCheckbox(COLUMN_2, ROW_2, 'InCTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 18}}))
    initializeCheckbox(COLUMN_3, ROW_2, 'InCBigFollower', translate("TOOLTIP_BIG_FOLLOWER"))
    initializeCheckbox(COLUMN_4, ROW_2, 'InCInns', translate("TOOLTIP_INN"))
    initializeCheckbox(COLUMN_5, ROW_2, 'InCCathedrals', translate("TOOLTIP_CATHEDRAL"))

--Traders & Builders
    initializeAllCheckbox(COLUMN_1, ROW_3, 'TnBAll', translate("TOOLTIP_ENABLE_ALL"))
    initializeCheckbox(COLUMN_2, ROW_3, 'TnBTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 24}}))
    initializeCheckbox(COLUMN_3, ROW_3, 'TnBBuilder', translate("TOOLTIP_BUILDER"))
    initializeCheckbox(COLUMN_4, ROW_3, 'TnBPig', translate("TOOLTIP_PIG"))
    initializeCheckbox(COLUMN_5, ROW_3, 'TnBTradeGoods', translate("TOOLTIP_TRADE_GOODS"))

--The Princess & The Dragon
    initializeAllCheckbox(COLUMN_1, ROW_4, 'PnDAll', translate("TOOLTIP_ENABLE_ALL"))
    initializeCheckbox(COLUMN_2, ROW_4, 'PnDTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 30}}))
    initializeCheckbox(COLUMN_3, ROW_4, 'PnDDragon', translate("TOOLTIP_DRAGON"))
    initializeCheckbox(COLUMN_4, ROW_4, 'PnDFairy', translate("TOOLTIP_FAIRY"))
    initializeCheckbox(COLUMN_5, ROW_4, 'PnDMagicPortal', translate("TOOLTIP_MAGIC_PORTAL"))
    initializeCheckbox(COLUMN_6, ROW_4, 'PnDPrincess', translate("TOOLTIP_PRINCESS"))

--The Tower
    initializeAllCheckbox(COLUMN_1, ROW_5, 'TowerAll', translate("TOOLTIP_ENABLE_ALL"))
    initializeCheckbox(COLUMN_2, ROW_5, 'TowerTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 18}}))

    button_parameters.click_function = 'onTowersDecr'
    button_parameters.label = '-'
    button_parameters.tooltip = ''
    button_parameters.position = {COLUMN_3 + 1, BUTTON_HEIGHT, ROW_5}
    self.createButton( button_parameters )
    btnIDs['btnTowersDecr'] = index
    index = index + 1

    button_parameters.click_function = 'onTowerTowersToggle'
    button_parameters.label = '0'
    button_parameters.position = {COLUMN_3, BUTTON_HEIGHT, ROW_5}
    button_parameters.tooltip = translate("TOOLTIP_TOWER")
    if Global.call('getControlPanelState', {key = 'TowerTowers'}) then
        button_parameters.label = '' .. Global.call('getControlPanelState', {key = 'TowerNumTowers'})
    end
    self.createButton( button_parameters )
    btnIDs['btnTowerTowersToggle'] = index
    index = index + 1

    button_parameters.click_function = 'onTowersIncr'
    button_parameters.label = '+'
    button_parameters.tooltip = ''
    button_parameters.position = {COLUMN_3 - 1, BUTTON_HEIGHT, ROW_5}
    self.createButton( button_parameters )
    btnIDs['btnTowersIncr'] = index
    index = index + 1
end

function initializeAllCheckbox(x, z, key, description)
    local buttonGroup
    if key == 'InCAll' then buttonGroup = {'InCTiles', 'InCBigFollower', 'InCInns', 'InCCathedrals'}
    elseif key == 'TnBAll' then buttonGroup = {'TnBTiles', 'TnBBuilder', 'TnBPig', 'TnBTradeGoods'}
    elseif key == 'PnDAll' then buttonGroup = {'PnDTiles', 'PnDDragon', 'PnDFairy', 'PnDMagicPortal', 'PnDPrincess'}
    elseif key == 'TowerAll' then buttonGroup = {'TowerTiles', 'TowerTowers'}
    else return end
    local allChecked = true
    for _, setting_key in ipairs(buttonGroup) do
        if not Global.call('getControlPanelState', {key = setting_key}) then
            allChecked = false
        end
    end

    if allChecked then
        button_parameters.label = 'X'
    else
        button_parameters.label = ''
    end
    button_parameters.tooltip = description
    button_parameters.click_function = 'on' .. key .. 'Toggle'
    button_parameters.position = {x, BUTTON_HEIGHT, z}
    self.createButton( button_parameters )
    btnIDs['btn' .. key .. 'Toggle'] = index
    index = index + 1
end

function checkAllCheckboxes()
    for _, button_key in ipairs({'btnInCAllToggle', 'btnTnBAllToggle', 'btnPnDAllToggle', 'btnTowerAllToggle'}) do
        local buttonGroup
        if button_key == 'btnInCAllToggle' then buttonGroup = {'InCTiles', 'InCBigFollower', 'InCInns', 'InCCathedrals'}
        elseif button_key == 'btnTnBAllToggle' then buttonGroup = {'TnBTiles', 'TnBBuilder', 'TnBPig', 'TnBTradeGoods'}
        elseif button_key == 'btnPnDAllToggle' then buttonGroup = {'PnDTiles', 'PnDDragon', 'PnDFairy', 'PnDMagicPortal', 'PnDPrincess'}
        elseif button_key == 'btnTowerAllToggle' then buttonGroup = {'TowerTiles', 'TowerTowers'}
        else return end
        local allChecked = true
        for _, key in ipairs(buttonGroup) do
            if not Global.call('getControlPanelState', {key = key}) then
                allChecked = false
            end
        end

        if allChecked then
            self.editButton({index = btnIDs[button_key], label = 'X'})
        else
            self.editButton({index = btnIDs[button_key], label = ''})
        end
    end
end

function onAllButtonToggle(sPlayer, button_key)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local buttonGroup
    if button_key == 'btnInCAllToggle' then buttonGroup = {'InCTiles', 'InCBigFollower', 'InCInns', 'InCCathedrals'}
    elseif button_key == 'btnTnBAllToggle' then buttonGroup = {'TnBTiles', 'TnBBuilder', 'TnBPig', 'TnBTradeGoods'}
    elseif button_key == 'btnPnDAllToggle' then buttonGroup = {'PnDTiles', 'PnDDragon', 'PnDFairy', 'PnDMagicPortal', 'PnDPrincess'}
    elseif button_key == 'btnTowerAllToggle' then buttonGroup = {'TowerTiles', 'TowerTowers'}
    else return end
    local allChecked = true
    for _, key in ipairs(buttonGroup) do
        if not Global.call('getControlPanelState', {key = key}) then
            allChecked = false
        end
    end
    local label
    local value
    if allChecked then
        label = ''
        value = false
    else
        label = 'X'
        value = true
    end
    self.editButton({index = btnIDs[button_key], label = label})
    for _, key in ipairs(buttonGroup) do
        if key == 'TowerTowers' then
            if Global.call('getControlPanelState', {key = 'TowerTowers'}) then
                Global.call('setControlPanelState', {key = 'TowerTowers', value = false})
                self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '0'})
            else
                Global.call('setControlPanelState', {key = 'TowerTowers', value = true})
                self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '' .. Global.call('getControlPanelState', {key = 'TowerNumTowers'})})
            end
        else
            self.editButton({index = btnIDs['btn' .. key .. 'Toggle'], label = label})
            Global.call('setControlPanelState', {key = key, value = value})
        end
    end
end

function onBaseTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'BaseTiles', 'btnBaseTilesToggle')
end

function onBaseFollowersDecr(Object, sPlayer)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local numFollowers = Global.call('getControlPanelState', {key = 'BaseNumFollowers'})
    numFollowers = numFollowers - 1
    if numFollowers < 0 then numFollowers = 0 end
    if numFollowers == 6 then
        printToColor(translate("MESSAGE_FOLLOWER_COUNT_WARNING"), sPlayer, {1,0,0})
    end
    Global.call('setControlPanelState', {key = 'BaseNumFollowers', value = numFollowers})
    self.editButton({index = btnIDs['btnBaseFollowerToggle'], label = '' .. numFollowers})
end

function onBaseFollowersIncr(Object, sPlayer)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local numFollowers = Global.call('getControlPanelState', {key = 'BaseNumFollowers'})
    numFollowers = numFollowers + 1
    if numFollowers > 16 then numFollowers = 16 end
    if numFollowers == 8 then
        printToColor(translate("MESSAGE_FOLLOWER_COUNT_WARNING"), sPlayer, {1,0,0})
    end
    Global.call('setControlPanelState', {key = 'BaseNumFollowers', value = numFollowers})
    self.editButton({index = btnIDs['btnBaseFollowerToggle'], label = '' .. numFollowers})
end

function onBaseFollowerToggle(Object, sPlayer)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    if Global.call('getControlPanelState', {key = 'BaseFollower'}) then
        Global.call('setControlPanelState', {key = 'BaseFollower', value = false})
        self.editButton({index = btnIDs['btnBaseFollowerToggle'], label = '0'})
        printToColor(translate("MESSAGE_FOLLOWER_DISABLED_WARNING"), sPlayer, {1,0,0})
    else
        Global.call('setControlPanelState', {key = 'BaseFollower', value = true})
        self.editButton({index = btnIDs['btnBaseFollowerToggle'], label = '' .. Global.call('getControlPanelState', {key = 'BaseNumFollowers'})})
    end
    checkAllCheckboxes()
end

function onInCAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'btnInCAllToggle')
end

function onInCTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'InCTiles', 'btnInCTilesToggle')
end

function onInCBigFollowerToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'InCBigFollower', 'btnInCBigFollowerToggle')
end

function onInCInnsToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'InCInns', 'btnInCInnsToggle')
end

function onInCCathedralsToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'InCCathedrals', 'btnInCCathedralsToggle')
end

function onTnBAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'btnTnBAllToggle')
end

function onTnBTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TnBTiles', 'btnTnBTilesToggle')
end

function onTnBBuilderToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TnBBuilder', 'btnTnBBuilderToggle')
end

function onTnBPigToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TnBPig', 'btnTnBPigToggle')
end

function onTnBTradeGoodsToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TnBTradeGoods', 'btnTnBTradeGoodsToggle')
end

function onPnDAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'btnPnDAllToggle')
end

function onPnDTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDTiles', 'btnPnDTilesToggle')
end

function onPnDDragonToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDDragon', 'btnPnDDragonToggle')
end

function onPnDFairyToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDFairy', 'btnPnDFairyToggle')
end

function onPnDMagicPortalToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDMagicPortal', 'btnPnDMagicPortalToggle')
end

function onPnDPrincessToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDPrincess', 'btnPnDPrincessToggle')
end

function onTowerAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'btnTowerAllToggle')
end

function onTowerTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TowerTiles', 'btnTowerTilesToggle')
end

function onTowersDecr(Object, sPlayer)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local numTowers = Global.call('getControlPanelState', {key = 'TowerNumTowers'})
    numTowers = numTowers - 1
    if numTowers < 1 then numTowers = 1 end
    if numTowers == NUM_TOWERS_PER_PLAYER[numPlayers] - 1 then
        printToColor(translate("MESSAGE_TOWER_COUNT_WARNING"), sPlayer, {1,0,0})
    end
    Global.call('setControlPanelState', {key = 'TowerNumTowers', value = numTowers})
    self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '' .. numTowers})
end

function onTowersIncr(Object, sPlayer)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local numTowers = Global.call('getControlPanelState', {key = 'TowerNumTowers'})
    numTowers = numTowers + 1
    if numTowers > 30 then numTowers = 30 end
    if numTowers == NUM_TOWERS_PER_PLAYER[numPlayers] + 1 then
        printToColor(translate("MESSAGE_TOWER_COUNT_WARNING"), sPlayer, {1,0,0})
    end
    Global.call('setControlPanelState', {key = 'TowerNumTowers', value = numTowers})
    self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '' .. numTowers})
end

function onTowerTowersToggle(Object, sPlayer)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    if Global.call('getControlPanelState', {key = 'TowerTowers'}) then
        Global.call('setControlPanelState', {key = 'TowerTowers', value = false})
        self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '0'})
    else
        Global.call('setControlPanelState', {key = 'TowerTowers', value = true})
        self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '' .. Global.call('getControlPanelState', {key = 'TowerNumTowers'})})
    end
    checkAllCheckboxes()
end

function onPlayerChangedColor(player)
    if Global.call('gameIsActive', {}) then return end
    numPlayers = 0
    for _, color in ipairs(PLAYER_COLORS) do
        if Player[color].seated or Global.call('getControlPanelState', {key = color .. 'Control'}) ~= nil then
            numPlayers = numPlayers + 1
        end
    end
    if Global.call('getControlPanelState', {key = 'TowerTowers'}) then
        self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '' .. NUM_TOWERS_PER_PLAYER[numPlayers]})
    end
end
